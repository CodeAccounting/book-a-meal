// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Form disables submit button when submitting form 1`] = `
<div>
  <div
    className="modal-preloader text-center"
  >
    <MiniPreLoader />
  </div>
</div>
`;

exports[`Form renders caterer's signup form correctly 1`] = `
<div>
  <React.Fragment>
    <p
      className="text-muted mx-auto text-center"
    >
      Fields marked
      <span
        className="danger"
      >
         *
      </span>
       are required
    </p>
    <form
      onSubmit={[Function]}
    >
      <CatererSignupForm
        handlers={
          Object {
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleFocus": [Function],
            "handleSubmit": [Function],
          }
        }
        state={
          Object {
            "asyncValidating": false,
            "error": Object {
              "businessAddress": null,
              "businessName": null,
              "businessPhoneNo": null,
              "email": null,
              "password": null,
              "passwordConfirm": null,
              "role": null,
            },
            "formValid": false,
            "pristine": true,
            "touched": Object {
              "businessAddress": false,
              "businessName": false,
              "businessPhoneNo": false,
              "email": false,
              "password": false,
              "passwordConfirm": false,
              "role": false,
            },
            "type": "catererSignup",
            "values": Object {
              "businessAddress": "",
              "businessName": "",
              "businessPhoneNo": "",
              "email": "",
              "password": "",
              "passwordConfirm": "",
              "role": "caterer",
            },
          }
        }
        type="catererSignup"
      />
      <button
        className="btn btn-pri btn-block"
        disabled={true}
      >
        SIGN IN
      </button>
    </form>
    <p>
      something
    </p>
  </React.Fragment>
</div>
`;

exports[`Form renders correctly 1`] = `
<div>
  <React.Fragment>
    <form
      onSubmit={[Function]}
    >
      <SigninForm
        handlers={
          Object {
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleFocus": [Function],
            "handleSubmit": [Function],
          }
        }
        state={
          Object {
            "asyncValidating": false,
            "error": Object {
              "email": null,
              "password": null,
            },
            "formValid": false,
            "pristine": true,
            "touched": Object {
              "email": false,
              "password": false,
            },
            "type": "signin",
            "values": Object {
              "email": "",
              "password": "",
            },
          }
        }
        type="signin"
      />
      <button
        className="btn btn-pri btn-block"
        disabled={true}
      >
        SIGN IN
      </button>
    </form>
    <p>
      something
    </p>
  </React.Fragment>
</div>
`;

exports[`Form renders customer's signup form correctly 1`] = `
<div>
  <React.Fragment>
    <p
      className="text-muted mx-auto text-center"
    >
      Fields marked
      <span
        className="danger"
      >
         *
      </span>
       are required
    </p>
    <form
      onSubmit={[Function]}
    >
      <CustomerSignupForm
        handlers={
          Object {
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleFocus": [Function],
            "handleSubmit": [Function],
          }
        }
        state={
          Object {
            "asyncValidating": false,
            "error": Object {
              "email": null,
              "firstname": null,
              "lastname": null,
              "password": null,
              "passwordConfirm": null,
              "role": null,
            },
            "formValid": false,
            "pristine": true,
            "touched": Object {
              "email": false,
              "firstname": false,
              "lastname": false,
              "password": false,
              "passwordConfirm": false,
              "role": false,
            },
            "type": "customerSignup",
            "values": Object {
              "email": "",
              "firstname": "",
              "lastname": "",
              "password": "",
              "passwordConfirm": "",
              "role": "customer",
            },
          }
        }
        type="customerSignup"
      />
      <button
        className="btn btn-pri btn-block"
        disabled={true}
      >
        SIGN IN
      </button>
    </form>
    <p>
      something
    </p>
  </React.Fragment>
</div>
`;

exports[`Form shows error alert and disables submit button when there's a submit error 1`] = `
<div>
  <React.Fragment>
    <form
      onSubmit={[Function]}
    >
      <p
        className="danger text-center mb-0"
      >
        Username/Password do not match
      </p>
      <SigninForm
        handlers={
          Object {
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleFocus": [Function],
            "handleSubmit": [Function],
          }
        }
        state={
          Object {
            "asyncValidating": false,
            "error": Object {
              "email": null,
              "password": null,
            },
            "formValid": false,
            "pristine": true,
            "touched": Object {
              "email": false,
              "password": false,
            },
            "type": "signin",
            "values": Object {
              "email": "",
              "password": "",
            },
          }
        }
        type="signin"
      />
      <button
        className="btn btn-pri btn-block"
        disabled={true}
      >
        SIGN IN
      </button>
    </form>
    <p>
      something
    </p>
  </React.Fragment>
</div>
`;

exports[`Form test for right input calls handleChange and handleBlur on input change and blur for email field 1`] = `
<FormComponent
  dispatch={
    [MockFunction] {
      "calls": Array [
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
        Array [
          Object {
            "type": "CLEAR_AUTH_ERROR",
          },
        ],
      ],
    }
  }
  meta={
    Object {
      "btnText": "SIGN IN",
      "extra": <p>
        something
      </p>,
    }
  }
  submitError={null}
  submitting={false}
  type="signin"
>
  <div>
    <form
      onSubmit={[Function]}
    >
      <SigninForm
        handlers={
          Object {
            "handleBlur": [Function],
            "handleChange": [Function],
            "handleFocus": [Function],
            "handleSubmit": [Function],
          }
        }
        state={
          Object {
            "asyncValidating": false,
            "error": Object {
              "email": null,
              "password": null,
            },
            "formValid": false,
            "pristine": true,
            "touched": Object {
              "email": false,
              "password": false,
            },
            "type": "signin",
            "values": Object {
              "email": "",
              "password": "",
            },
          }
        }
        type="signin"
      >
        <RenderInput
          handleBlur={[Function]}
          handleChange={[Function]}
          handleFocus={[Function]}
          id="email"
          label="Email Address"
          meta={
            Object {
              "asyncValidating": false,
              "error": null,
              "touched": false,
            }
          }
          name="email"
          placeholder=""
          required={true}
          type="email"
          value=""
        >
          <div
            className="form-input"
          >
            <label
              htmlFor="email"
            >
              Email Address
              <span
                className="danger"
              >
                *
              </span>
            </label>
            <input
              className=""
              id="email"
              name="email"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              placeholder=""
              type="email"
              value=""
            />
          </div>
        </RenderInput>
        <RenderInput
          handleBlur={[Function]}
          handleChange={[Function]}
          handleFocus={[Function]}
          id="password"
          label="Password"
          meta={
            Object {
              "error": null,
              "touched": false,
            }
          }
          name="password"
          placeholder=""
          required={true}
          type="password"
          value=""
        >
          <div
            className="form-input"
          >
            <label
              htmlFor="password"
            >
              Password
              <span
                className="danger"
              >
                *
              </span>
            </label>
            <input
              className=""
              id="password"
              name="password"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              placeholder=""
              type="password"
              value=""
            />
          </div>
        </RenderInput>
      </SigninForm>
      <button
        className="btn btn-pri btn-block"
        disabled={true}
      >
        SIGN IN
      </button>
    </form>
    <p>
      something
    </p>
  </div>
</FormComponent>
`;
